<ls:UIWidget x:Name="Lobby_c"
             ls:UIWidget.ContextName="Lobby"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:ls="clr-namespace:ls;assembly=Code"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d"
             d:DesignHeight="2160" d:DesignWidth="3840"
             d:DataContext="{d:DesignInstance {x:Type ls:DCLobby}, IsDesignTimeCreatable=True}"
             FocusLeft="UILeft" FocusRight="UIRight" FocusUp="UIUp" FocusDown="UIDown" ls:MoveFocus.FocusMovementMode="Closest" CanCacheFocusSurroundingElements="False">

    <ls:UIWidget.Template>
        <ControlTemplate TargetType="ls:UIWidget">
            <ControlTemplate.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="pack://application:,,,/Core;component/Library/LobbyTemplates_c.xaml"/>
                        <ResourceDictionary Source="pack://application:,,,/Core;component/Library/NewOptionTemplates_c.xaml"/>
                    </ResourceDictionary.MergedDictionaries>

                    <BitmapImage x:Key="LobbyContentDivider" UriSource="pack://application:,,,/Core;component/Assets/Lobby_c/lobby_contentDivider.png"/>

                </ResourceDictionary>
            </ControlTemplate.Resources>

            <Grid x:Name="Root" Background="Black">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Loaded">
                            <ls:SetMoveFocusAction TargetName="Lobby_c"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>

                    <!-- Background -->
                    <Image x:Name="Bg" Grid.Row="0" Grid.RowSpan="4" Source="{StaticResource OptionsBackground}" VerticalAlignment="Top" HorizontalAlignment="Center" Stretch="UniformToFill" />

                    <StackPanel Grid.Row="0" Orientation="Horizontal" HorizontalAlignment="Center" Margin="10,60,10,10">
                        <TextBlock x:Name="LobbyName" Text="{Binding LobbyTitle}"
                                   Foreground="{StaticResource LS_tint100}"
                                   FontSize="{StaticResource ScaledTitleFontSize}"/>

                        <TextBlock x:Name="LobbyIsCrossplay" Text="{Binding Source='he26d61a7g0ce4g4006g9f87gf7be81e85526', Converter ={StaticResource TranslatedStringConverter}, StringFormat='{} - {0}'}"
                                   Foreground="{StaticResource LS_tint100}"
                                   FontSize="{StaticResource ScaledTitleFontSize}"
                                   Visibility="{Binding Data.IsUsingCrossplay, Converter={StaticResource BoolToVisibleConverter}}"/>
                    </StackPanel>

                    <TextBlock x:Name="Description" Grid.Row="1" Text="{Binding Source='h54254d1eg5521g4d2bg93a7gb1bfbf90d024', Converter={StaticResource TranslatedStringConverter}}"
                               Foreground="{StaticResource LS_baseTxtColor}"
                               FontSize="{StaticResource ScaledDefaultFontSize}" 
                               HorizontalAlignment="Center" TextAlignment="Center" 
                               TextWrapping="Wrap" 
                               Margin="10,10,10,50"/>

                    <AdornerDecorator Grid.Row="2">
                        <Viewbox StretchDirection="DownOnly">
                            <StackPanel>
                                <ItemsControl x:Name="Slots" Margin="0,10" HorizontalAlignment="Center" ItemsSource="{Binding PlayerSlots}" AlternationCount="{Binding PlayerSlots.Count}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate DataType="ls:VMLobbyPlayerInfo">
                                            <Border x:Name="Root" Style="{StaticResource PanelBorderStyle}" Width="480" Height="776" Margin="10,38">
                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="Loaded">
                                                        <b:Interaction.Behaviors>
                                                            <b:ConditionBehavior>
                                                                <b:ConditionalExpression>
                                                                    <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContentPresenter}}" Operator="Equal" RightOperand="0"/>
                                                                </b:ConditionalExpression>
                                                            </b:ConditionBehavior>
                                                        </b:Interaction.Behaviors>
                                                        <ls:SetMoveFocusAction TargetName="Lobby_c" FocusElement="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContentPresenter}}"/>
                                                    </b:EventTrigger>
                                                    <b:DataTrigger Binding="{Binding IsEnabled, ElementName=Root}" Value="True">
                                                        <b:Interaction.Behaviors>
                                                            <b:ConditionBehavior>
                                                                <b:ConditionalExpression>
                                                                    <b:ComparisonCondition LeftOperand="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContentPresenter}}" Operator="Equal" RightOperand="0"/>
                                                                </b:ConditionalExpression>
                                                            </b:ConditionBehavior>
                                                        </b:Interaction.Behaviors>
                                                        <ls:SetMoveFocusAction TargetName="Lobby_c" FocusElement="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContentPresenter}}"/>
                                                    </b:DataTrigger>
                                                </b:Interaction.Triggers>
                                                <DockPanel VerticalAlignment="Stretch" HorizontalAlignment="Stretch" LastChildFill="False" Margin="0,-38,0,0">
                                                    <Control x:Name="PlayerImage" DockPanel.Dock="Top" Template="{StaticResource PlayerImageTemplate}" Focusable="True" ls:MoveFocus.Focusable="True"/>
                                                    <TextBlock x:Name="Readyness" DockPanel.Dock="Bottom" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}"
                                                       Foreground="{StaticResource LS_baseTxtColor}" Margin="0,0,0,80"
                                                       Text="{Binding Source='h996e8fc7gf350g4cb1gaec7g9dbee9ff14f3', Converter ={StaticResource TranslatedStringConverter}}"/>
                                                    <Image x:Name="ReadyImage" DockPanel.Dock="Bottom" Visibility="Hidden" Stretch="None" Source="{StaticResource LobbyReadyCheck}"/>
                                                </DockPanel>
                                            </Border>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=PlayerImage}" Value="True">
                                                    <Setter TargetName="Root" Property="BorderBrush" Value="{StaticResource LS_PanelSelectedBorder}"/>
                                                    <Setter TargetName="PlayerImage" Property="IsEnabled" Value="True"/>
                                                    <Setter TargetName="Readyness" Property="Foreground" Value="{StaticResource LS_selectedTextPad}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsReady}" Value="True">
                                                    <Setter TargetName="ReadyImage" Property="Visibility" Value="Visible"/>
                                                    <Setter TargetName="Readyness" Property="Text" Value="{Binding Source='hd0893eb3gec78g4c1ag8c10gf4860d887ff9', Converter ={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding State}" Value="Closed">
                                                    <Setter TargetName="PlayerImage" Property="Focusable" Value="False"/>
                                                    <Setter TargetName="PlayerImage" Property="ls:MoveFocus.Focusable" Value="False"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>

                                <ItemsControl x:Name="Settings" HorizontalAlignment="Center" Width="2000" Margin="40" ItemsSource="{Binding Options}">
                                    <ItemsControl.Resources>
                                        <DataTemplate DataType="{x:Type ls:VMComboBoxSetting}">
                                            <DockPanel Width="780" LastChildFill="False">
                                                <TextBlock x:Name="Header" DockPanel.Dock="Left" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_baseTxtColor}"
                                                           Text="{Binding Text}" VerticalAlignment="Top"/>
                                                <TextBlock x:Name="Value" DockPanel.Dock="Right" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_accent75TxtColor}"
                                                           Text="{Binding SelectedItem.Name}" VerticalAlignment="Top"/>
                                            </DockPanel>
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type ls:VMTickBoxSetting}">
                                            <DockPanel Width="780" LastChildFill="False">
                                                <TextBlock x:Name="Header" DockPanel.Dock="Left" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_baseTxtColor}"
                                                       Text="{Binding Text}"/>
                                                <TextBlock x:Name="Value" DockPanel.Dock="Right" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_accent75TxtColor}"
                                                       Text="{Binding Source='h14129139ge40bg4627g944ag06fec7d74c9d', Converter={StaticResource TranslatedStringConverter}}"/>
                                            </DockPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding Value}" Value="False">
                                                    <Setter TargetName="Value" Property="Text" Value="{Binding Source='h366d1022g0f83g4132ga3a6g733b9df2c8e7', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Enabled}" Value="False">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                    <Setter TargetName="Value" Property="Text" Value="{Binding Source='h468f21a6g00c2g41c3g81d3gbe5291d6ab4d', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.Resources>
                                    <ItemsControl.Template>
                                        <ControlTemplate TargetType="ItemsControl">
                                            <Grid>
                                                <Image VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="None" Source="{StaticResource LobbyContentDivider}"/>
                                                <ItemsPresenter Margin="40,0,0,0"/>

                                                <Grid x:Name="DirectConnectText"
                                                    VerticalAlignment="Top" HorizontalAlignment="Center" Margin="980 160 0 15" Width="780"
                                                    Visibility="Collapsed">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <TextBlock Text="{Binding Source='haf666ef6gd33fg456cg830bg4158a2107a5e', Converter={StaticResource TranslatedStringConverter}}" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Top" 
                                                               FontSize="{DynamicResource ScaledDefaultFontSize}" Foreground="{DynamicResource LS_baseTxtColor}" Margin="0 15" TextWrapping="Wrap" LineStackingStrategy="MaxHeight" LineHeight="{StaticResource ScaledMediumFontSizeLineHeight}" />

                                                    <TextBlock x:Name="DirectConnectionID" Text="{Binding DirectConnectionID}" HorizontalAlignment="Center" VerticalAlignment="Top" Grid.Column="1"
                                                               FontSize="{DynamicResource ScaledDefaultFontSize}" Foreground="{DynamicResource LS_accent75TxtColor}" Margin="0 15"/>
                                                </Grid>

                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding DirectConnectionID, Converter={StaticResource NullToBoolFalseConverter}}" Value="True" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter TargetName="DirectConnectText" Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ItemsControl.Template>
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemContainerStyle>
                                        <Style TargetType="ContentPresenter">
                                            <Setter Property="Margin" Value="80,10, 120, 10"/>
                                        </Style>
                                    </ItemsControl.ItemContainerStyle>
                                </ItemsControl>
                            </StackPanel>
                        </Viewbox>
                    </AdornerDecorator>

                    <ls:LSButton x:Name="LaunchGameBtn" Grid.Row="3" HorizontalAlignment="Center" VerticalAlignment="Top" Focusable="False" BoundEvent="UIDelete" TapTime="{StaticResource DefaultButtonTapTime}"
                                 Visibility="Collapsed" IsEnabled="False" Margin="0,10" Template="{StaticResource PrimaryButtonTemplate}"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIDelete'}"
                                 Tag="{Binding LaunchGame.Name}"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Command="{Binding LaunchGame.ActionCommand}"/>

                    <ls:LSButton x:Name="ReadyBtn" Grid.Row="3" HorizontalAlignment="Center" VerticalAlignment="Top" Focusable="False" BoundEvent="UIDelete" TapTime="{StaticResource DefaultButtonTapTime}"
                                     Visibility="Collapsed" IsEnabled="True" Margin="0,10" Template="{StaticResource PrimaryButtonTemplate}"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIDelete'}"
                                     Tag="{Binding Source='h9bed5121g00aag4ef9gb3b1g593451ff8b62',Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding ReadyPressed}"/>

                    <!-- Chat Lines -->
                    <TextBlock x:Name="Chat" Grid.Row="1" Grid.RowSpan="3" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" TextAlignment="Left" TextWrapping="Wrap" Margin="10,0"/>
                </Grid>

                <Rectangle x:Name="LobbySettingsBackground" Stretch="Fill" Visibility="Collapsed" Fill="{StaticResource LS_PopUpBackgroundColorMedium}"/>
                <Border x:Name="LobbySettings" IsHitTestVisible="True" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource PanelBorderStyle}" Visibility="Collapsed">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="IsVisibleChanged">
                            <ls:SetMoveFocusAction TargetName="Lobby_c" FocusElement="LobbySettings" DeferFocusAction="True"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                    <StackPanel HorizontalAlignment="Stretch" Margin="30,2, 30, 0">
                        <TextBlock x:Name="FiltersTitle" Style="{StaticResource TitleText}" Margin="10,72" HorizontalAlignment="Stretch"
                                   Text="{Binding Source='ha1114645g6104g4cafga220g9e7ed65b7e79', Converter={StaticResource TranslatedStringConverter}}"/>
                        <ItemsControl x:Name="Options" AlternationCount="{Binding Options.Count}" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                      Margin="10" ItemsSource="{Binding Options}" ItemContainerStyle="{StaticResource OptionStyle}" Background="{x:Null}">
                            <ItemsControl.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <ScrollViewer Template="{StaticResource ScrollViewerTemplate}" Focusable="False">
                                            <ScrollViewer.Resources>
                                                <GridLength x:Key="Top">84</GridLength>
                                                <GridLength x:Key="Bottom">84</GridLength>
                                            </ScrollViewer.Resources>
                                            <ItemsPresenter Margin="0,0,0,40"/>
                                        </ScrollViewer>
                                    </Grid>
                                </ControlTemplate>
                            </ItemsControl.Template>
                        </ItemsControl>
                    </StackPanel>
                </Border>

                <Rectangle x:Name="RenameLobbyBackground" Stretch="Fill" Visibility="Collapsed" Fill="{StaticResource LS_PopUpBackgroundColorMedium}"/>
                <Grid x:Name="RenameLobby" IsHitTestVisible="True" VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Collapsed">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="IsVisibleChanged">
                            <ls:SetMoveFocusAction TargetName="Lobby_c"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>

                    <Border HorizontalAlignment="Center" VerticalAlignment="Stretch" Style="{StaticResource PanelBorderStyle}">
                        <StackPanel HorizontalAlignment="Stretch" Margin="2" Width="1070">
                            <TextBlock x:Name="RenameTitle" Style="{StaticResource TitleText}" Margin="80,72,80,100" HorizontalAlignment="Stretch"
                                       Text="{Binding Source='h76bfcee9g096eg4b30g85c6g577dd5c24e44', Converter={StaticResource TranslatedStringConverter}}"/>
                            <TextBlock x:Name="RenameDescription" Margin="80,10" HorizontalAlignment="Stretch" TextAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}"
                                       Foreground="{StaticResource LS_baseTxtColor}" TextWrapping="Wrap"
                                       Text="{Binding Source='hf78c3cecg7cf4g498ag9ed8g1132d6a12f4f', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSTextBox x:Name="RenameEdit" Style="{StaticResource FocusableTextBoxStyle}" Margin="80,30" MaxLength="20"
                                          Text="{Binding EditableTitle, Mode=TwoWay}" ProfanityFilter="True" OpenVirtualKeyboardOnFocus="False"/>

                            <ls:LSButton x:Name="RenameConfirmBtn" Style="{StaticResource FocusableButtonStyle}" Margin="80,30,80,80"
                                         Content="{Binding Source='h7a174735g0099g4ca9ga1f7ga53ad66b1aa4',Converter={StaticResource TranslatedStringConverter}}"
                                         Command="{Binding RenameLobby}"
                                         CommandParameter="{Binding EditableTitle}"/>
                        </StackPanel>
                    </Border>
                </Grid>

                <!-- Bottom section-->
                <Border Margin="56,0">
                    <ls:AlignableWrapPanel x:Name="LobbyBottomButtons" HorizontalAlignment="Center" Style="{StaticResource ButtonHint.Container.CenterWrap}" >
                        <ls:LSButton x:Name="ViewProfileBtn" Focusable="False" BoundEvent="UIAccept" VerticalAlignment="Bottom"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                     Tag="{Binding Source='h3b2e74b1g38ffg4109g9f13gfefb9cb0b79d',Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding ViewProfile}"
                                     CommandParameter="{Binding FocusedElement.DataContext.SlotIndex, ElementName=Lobby_c}"/>
                        <ls:LSButton x:Name="InviteBtn" Focusable="False" BoundEvent="UICreate" VerticalAlignment="Bottom"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICreate'}"
                                     Tag="{Binding Source='h5bacb1e0geecag4473g9aa1g3f3ed207377e',Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding InvitePlayer}"/>
                        <ls:LSButton x:Name="KickBtn" Style="{StaticResource ControllerHoldButtonStyle}" Focusable="False" VerticalAlignment="Bottom"
                                     Visibility="Collapsed" IsEnabled="False"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIKickPlayer'}"
                                     Tag="{Binding Source='h0487803bgd9e5g4e29gbcf3gfefce7a32e52',Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding DataContext.KickPlayer, ElementName=Lobby_c}"
                                     CommandParameter="{Binding Path=FocusedElement.DataContext.SlotIndex, ElementName=Lobby_c}"/>
                        <ls:LSButton x:Name="MuteBtn" Focusable="False" BoundEvent="UIMutePlayer" VerticalAlignment="Bottom"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMutePlayer'}"
                                     Tag="{Binding Source='hcb913d85g7404g4f40gbda7g914ee60b0008',Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding ToggleMuteCommand}"
                                     CommandParameter="{Binding Path=FocusedElement.DataContext.SlotIndex, ElementName=Lobby_c}"/>
                        <ls:LSButton x:Name="EditBtn" Focusable="False" BoundEvent="ToggleInGameMenu" VerticalAlignment="Bottom"
                                     Visibility="Collapsed" IsEnabled="False"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ToggleInGameMenu'}"
                                     Tag="{Binding Source='hccbf31fdg78f0g4ac2g9adbg1d3fe6a2794a',Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding EditSessionSettings}"/>
                        <ls:LSButton x:Name="EditCustomRulesetBtn" Focusable="False" BoundEvent="ContextMenu" VerticalAlignment="Bottom"
                                     Visibility="Collapsed"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ContextMenu'}"
                                     Tag="{Binding Source='h9e40e959g89e8g458cg8308gd6627bea0c63',Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding CustomEvent, Mode=OneTime}"
                                     CommandParameter="EditCustom"/>
                        <ls:LSButton x:Name="CopyBtn" Focusable="False" BoundEvent="UIEnterCode" VerticalAlignment="Bottom"
                                     Visibility="Collapsed" IsEnabled="False"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIEnterCode'}"
                                     Tag="{Binding Source='h68f975abgec41g4751g9d2bgc35b400b6fe0',Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding CopyToClipboardCommand}"
                                     CommandParameter="{Binding Text, ElementName=DirectConnectionID}"/>
                        <ls:LSButton x:Name="RenameBtn" Focusable="False" BoundEvent="UIRenameLobby" VerticalAlignment="Bottom"
                                     Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource BoolToVisibleConverter}}"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIRenameLobby'}"
                                     Tag="{Binding Source='h76bfcee9g096eg4b30g85c6g577dd5c24e44',Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding OpenRename}"/>
                        <ls:LSButton x:Name="ContextMenuBtn" Focusable="False" BoundEvent="UIAccept" VerticalAlignment="Bottom"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                     Tag="{Binding Source='h1f5a4453gcd7ag4dc6gb127g5744ea1922ac', Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding CustomEvent}" CommandParameter="OpenCrossplayProfile"
                                     Visibility="{Binding FocusedElement.DataContext.CrossplayUser, ElementName=Lobby_c, Converter={StaticResource NullToCollapsedConverter}, FallbackValue=Collapsed}"/>
                        <ls:LSButton x:Name="BackCancelBtn" Focusable="False" BoundEvent="UICancel" VerticalAlignment="Bottom"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                                     Tag="{Binding Source='h01d5c470g61bfg498cgb17eg7be425444fa5',Converter={StaticResource TranslatedStringConverter}}"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Command="{Binding Back}"
                                     SoundID="UI_Shared_Cancel">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click">
                                    <ls:SetMoveFocusAction TargetName="Lobby_c" FocusElement="Slots" DeferFocusAction="True"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>
                    </ls:AlignableWrapPanel>
                </Border>
            </Grid>
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding IsMaster}" Value="True">
                    <Setter TargetName="LaunchGameBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="LaunchGameBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="EditBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="EditBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="ReadyBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ReadyBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsMaster}" Value="False">
                    <Setter TargetName="ReadyBtn" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMaster}" Value="False"/>
                        <Condition Binding="{Binding CommunityType}" Value="PS5NP2"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="InviteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="InviteBtn" Property="IsEnabled" Value="False"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.DataContext.IsHost, ElementName=Lobby_c, FallbackValue=True}" Value="True">
                    <!-- Don't show the kick button for the host -->
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Data.IsUsingCrossplay}" Value="True">
                    <Setter TargetName="ViewProfileBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ViewProfileBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding FocusedElement.DataContext.Player.IsLocalPLayer, ElementName=Lobby_c, FallbackValue=True}" Value="False"/>
                        <Condition Binding="{Binding Data.IsUsingCrossplay}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ViewProfileBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ViewProfileBtn" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.DataContext.Player.IsLocalPLayer, ElementName=Lobby_c, FallbackValue=True}" Value="True">
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.DataContext.State, ElementName=Lobby_c, FallbackValue=Open}" Value="Open">
                    <Setter TargetName="ViewProfileBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ViewProfileBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.DataContext.State, ElementName=Lobby_c, FallbackValue=Closed}" Value="Closed">
                    <Setter TargetName="ViewProfileBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ViewProfileBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsMaster}" Value="True">
                    <Setter TargetName="InviteBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="InviteBtn" Property="IsEnabled" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsMaster}" Value="False">
                    <Setter TargetName="InviteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="InviteBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding LobbyState}" Value="EditSession">
                    <Setter TargetName="LobbySettings" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="LobbySettingsBackground" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="LaunchGameBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="Slots" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="ViewProfileBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ViewProfileBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="InviteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="InviteBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="EditBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="EditBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="RenameBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="RenameBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="ContextMenuBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ContextMenuBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="BackCancelBtn" Property="Tag" Value="{Binding Source='h9d3b37a6gf7e3g40a8g87d3g21b1d1732512',Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding LobbyState}" Value="EditSession"/>
                        <Condition Binding="{Binding RulesetIsCustom}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="EditCustomRulesetBtn" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding LobbyState}" Value="Rename">
                    <Setter TargetName="RenameLobby" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="RenameLobbyBackground" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="LaunchGameBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="Slots" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="ViewProfileBtn" Property="Command" Value="{Binding FocusedElement.Command, ElementName=Lobby_c, FallbackValue={x:Null}}"/>
                    <Setter TargetName="ViewProfileBtn" Property="CommandParameter" Value="{Binding FocusedElement.CommandParameter, ElementName=Lobby_c}"/>
                    <Setter TargetName="ViewProfileBtn" Property="Tag" Value="{Binding Source='hd0c08193ga7f2g4a7eg8225g63748c7b3096',Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="ViewProfileBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ViewProfileBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="InviteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="InviteBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="EditBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="EditBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="RenameBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="RenameBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="ContextMenuBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ContextMenuBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="BackCancelBtn" Property="Tag" Value="{Binding Source='h9d3b37a6gf7e3g40a8g87d3g21b1d1732512',Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CanStart}" Value="False">
                    <Setter TargetName="LaunchGameBtn" Property="Opacity" Value="0.4"/>
                    <Setter TargetName="LaunchGameBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Data.IsUsingCrossplay}" Value="True">
                    <Setter TargetName="InviteBtn" Property="Command" Value="{Binding CustomEvent}"/>
                    <Setter TargetName="InviteBtn" Property="CommandParameter" Value="OpenFriendsList"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="FocusChanged">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
            <b:InvokeCommandAction Command="{Binding SetCurrentCrossplayFriendCommand}" CommandParameter="{Binding FocusedElement.DataContext.CrossplayUser, ElementName=Lobby_c}" />
        </b:EventTrigger>
        <b:EventTrigger EventName="Loaded">
            <ls:LSPlaySound Sound="Music_Lobby_Screen"/>
            <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElementCommand, ElementName=Lobby_c}"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="WidgetClosing">
            <b:InvokeCommandAction Command="{Binding ClearCurrentCrossplayFriendCommand}"/>
        </b:EventTrigger>
    </b:Interaction.Triggers>
</ls:UIWidget> 
